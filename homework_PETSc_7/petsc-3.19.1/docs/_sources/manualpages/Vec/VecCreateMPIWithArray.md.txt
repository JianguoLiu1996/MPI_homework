:orphan:
# VecCreateMPIWithArray
Creates a parallel, array-style vector, where the user provides the array space to store the vector values. 
## Synopsis
```
#include "petscvec.h"   
PetscErrorCode VecCreateMPIWithArray(MPI_Comm comm, PetscInt bs, PetscInt n, PetscInt N, const PetscScalar array[], Vec *vv)
```
Collective


## Input Parameters

- ***comm  -*** the MPI communicator to use
- ***bs    -*** block size, same meaning as `VecSetBlockSize()`
- ***n     -*** local vector length, cannot be `PETSC_DECIDE`
- ***N     -*** global vector length (or `PETSC_DETERMINE` to have calculated)
- ***array -*** the user provided array to store the vector values



## Output Parameter

- ***vv -*** the vector





## Notes
Use `VecDuplicate()` or `VecDuplicateVecs()` to form additional vectors of the
same type as an existing vector.

If the user-provided array is `NULL`, then `VecPlaceArray()` can be used
at a later stage to SET the array for storing the vector values.

PETSc does NOT free `array` when the vector is destroyed via `VecDestroy()`.

The user should not free `array` until the vector is destroyed.


## See Also
 [](chapter_vectors), `Vec`, `VecType`, `VecCreateSeqWithArray()`, `VecCreate()`, `VecDuplicate()`, `VecDuplicateVecs()`, `VecCreateGhost()`,
`VecCreateMPI()`, `VecCreateGhostWithArray()`, `VecPlaceArray()`

## Level
intermediate

## Location
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/vec/vec/impls/mpi/pbvec.c.html#VecCreateMPIWithArray">src/vec/vec/impls/mpi/pbvec.c</A>

## Examples
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/dm/tutorials/ex22.c.html">src/dm/tutorials/ex22.c</A><BR>


---
[Edit on GitLab](https://gitlab.com/petsc/petsc/-/edit/release/src/vec/vec/impls/mpi/pbvec.c)


[Index of all Vec routines](index.md)  
[Table of Contents for all manual pages](/manualpages/index.md)  
[Index of all manual pages](/manualpages/singleindex.md)  
