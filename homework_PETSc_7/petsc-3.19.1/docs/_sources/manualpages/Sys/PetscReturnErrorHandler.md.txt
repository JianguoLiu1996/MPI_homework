:orphan:
# PetscReturnErrorHandler
Error handler that causes a return without printing an error message. 
## Synopsis
```
#include "petscsys.h" 
PetscErrorCode PetscReturnErrorHandler(MPI_Comm comm, int line, const char *fun, const char *file, PetscErrorCode n, PetscErrorType p, const char *mess, void *ctx)
```
Not Collective


## Input Parameters

- ***comm -*** communicator over which error occurred
- ***line -*** the line number of the error (indicated by __LINE__)
- ***file -*** the file in which the error was detected (indicated by __FILE__)
- ***mess -*** an error text string, usually just printed to the screen
- ***n -*** the generic error number
- ***p -*** specific error number
- ***ctx -*** error handler context





## Notes
Most users need not directly employ this routine and the other error
handlers, but can instead use the simplified interface `SETERRQ()`, which has
the calling sequence
```none
SETERRQ(comm,number,mess)
```

`PetscIgnoreErrorHandler()` does the same thing as this function, but is deprecated, you should use this function.

Use `PetscPushErrorHandler()` to set the desired error handler.


## See Also
 `PetscPushErrorHandler()`, `PetscPopErrorHandler()`, `PetscError()`, `PetscAbortErrorHandler()`, `PetscMPIAbortErrorHandler()`, `PetscTraceBackErrorHandler()`,
`PetscAttachDebuggerErrorHandler()`, `PetscEmacsClientErrorHandler()`

## Level
developer

## Location
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/sys/error/err.c.html#PetscReturnErrorHandler">src/sys/error/err.c</A>

## Examples
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/ksp/ksp/tutorials/ex27.c.html">src/ksp/ksp/tutorials/ex27.c</A><BR>


---
[Edit on GitLab](https://gitlab.com/petsc/petsc/-/edit/release/src/sys/error/err.c)


[Index of all Sys routines](index.md)  
[Table of Contents for all manual pages](/manualpages/index.md)  
[Index of all manual pages](/manualpages/singleindex.md)  
