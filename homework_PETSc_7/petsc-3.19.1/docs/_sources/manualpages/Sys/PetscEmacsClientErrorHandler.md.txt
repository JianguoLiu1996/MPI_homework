:orphan:
# PetscEmacsClientErrorHandler
Error handler that uses the emacsclient program to load the file where the error occurred. Then calls the "previous" error handler. 
## Synopsis
```
#include "petscsys.h" 
PetscErrorCode PetscEmacsClientErrorHandler(MPI_Comm comm, int line, const char *fun, const char *file, PetscErrorCode n, PetscErrorType p, const char *mess, void *ctx)
```
Not Collective


## Input Parameters

- ***comm -*** communicator over which error occurred
- ***line -*** the line number of the error (indicated by __LINE__)
- ***file -*** the file in which the error was detected (indicated by __FILE__)
- ***mess -*** an error text string, usually just printed to the screen
- ***n -*** the generic error number
- ***p -*** specific error number
- ***ctx -*** error handler context



## Options Database Key

- ***-on_error_emacs <machinename> -*** will contact machinename to open the Emacs client there





## Note
You must put (server-start) in your .emacs file for the emacsclient software to work


## Developer Note
Since this is an error handler it cannot call `PetscCall()`; thus we just return if an error is detected.
But some of the functions it calls do perform error checking that may not be appropriate in a error handler call.


## See Also
 `PetscError()`, `PetscPushErrorHandler()`, `PetscPopErrorHandler()`, `PetscAttachDebuggerErrorHandler()`,
`PetscAbortErrorHandler()`, `PetscMPIAbortErrorHandler()`, `PetscTraceBackErrorHandler()`, `PetscReturnErrorHandler()`

## Level
developer

## Location
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/sys/error/err.c.html#PetscEmacsClientErrorHandler">src/sys/error/err.c</A>


---
[Edit on GitLab](https://gitlab.com/petsc/petsc/-/edit/release/src/sys/error/err.c)


[Index of all Sys routines](index.md)  
[Table of Contents for all manual pages](/manualpages/index.md)  
[Index of all manual pages](/manualpages/singleindex.md)  
