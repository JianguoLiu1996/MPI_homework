:orphan:
# PetscLimiterRegister
Adds a new `PetscLimiter` implementation 
## Synopsis
```
#include "petscfv.h" 
PetscErrorCode PetscLimiterRegister(const char sname[], PetscErrorCode (*function)(PetscLimiter))
```
Not Collective


## Input Parameters

- ***sname -*** The name of a new user-defined creation routine
- ***function -*** The creation routine



## Sample usage
```none
    PetscLimiterRegister("my_lim", MyPetscLimiterCreate);
```


Then, your `PetscLimiter` type can be chosen with the procedural interface via
```none
    PetscLimiterCreate(MPI_Comm, PetscLimiter *);
    PetscLimiterSetType(PetscLimiter, "my_lim");
```

or at runtime via the option
```none
    -petsclimiter_type my_lim
```





## Note
`PetscLimiterRegister()` may be called multiple times to add several user-defined PetscLimiters


## See Also
 `PetscLimiter`, `PetscLimiterType`, `PetscLimiterRegisterAll()`, `PetscLimiterRegisterDestroy()`

## Level
advanced

## Location
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/dm/dt/fv/interface/fv.c.html#PetscLimiterRegister">src/dm/dt/fv/interface/fv.c</A>


---
[Edit on GitLab](https://gitlab.com/petsc/petsc/-/edit/release/src/dm/dt/fv/interface/fv.c)


[Index of all FV routines](index.md)  
[Table of Contents for all manual pages](/manualpages/index.md)  
[Index of all manual pages](/manualpages/singleindex.md)  
